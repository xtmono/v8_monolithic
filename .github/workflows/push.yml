name: build when push
on: [push]

env:
  V8_VERSION: 8.4.380

defaults:
  run:
    shell: bash

jobs:
  build-linux-x64:
#    if: ${{ false }}  # disable
    name: linux
    runs-on: ubuntu-24.04
    container:
      image: ubuntu:20.04
    strategy:
      fail-fast: false
      matrix:
        platform: [linux-x64-debug, linux-x64-release]
    steps:
      - name: Platform env
        run: |
          echo "OS=$(echo ${{ matrix.platform }} | cut -d'-' -f1)" >> "$GITHUB_ENV"
          echo "ARCH=$(echo ${{ matrix.platform }} | cut -d'-' -f2)" >> "$GITHUB_ENV"
          echo "BUILD_TYPE=$(echo ${{ matrix.platform }} | cut -d'-' -f3)" >> "$GITHUB_ENV"
          echo 'IS_DEBUG=$([ "$BUILD_TYPE" = "debug" ] && echo true || echo false)' >> "$GITHUB_ENV"
      - name: Install preliminary tools
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo -e "Package: snapd\nPin: release a=*\nPin-Priority: -10\n" >> /etc/apt/preferences.d/nosnap.pref
          echo -e "Package: snapcraft\nPin: release a=*\nPin-Priority: -10\n" >> /etc/apt/preferences.d/nosnap.pref
          apt-get update && apt-get -y upgrade
          apt-get install -y git python3 python2 build-essential ninja-build curl lsb-release sudo apt-utils tzdata
          update-alternatives --install /usr/bin/python python /usr/bin/python2 60
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH=${GITHUB_WORKSPACE}/depot_tools:${PATH}
          gclient
          echo "PATH=${GITHUB_WORKSPACE}/depot_tools:${PATH}" >> "$GITHUB_ENV"
      - name: Fetch v8 repository
        run: |
          fetch v8
      - name: Sync v8 repository to target version
        run: |
          cd v8
          git checkout tags/${V8_VERSION}
          gclient sync
      - name: Install build dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          v8/build/install-build-deps.sh --no-prompt --no-chromeos-fonts --no-nacl
      - name: Compress headers
        run: |
          tar -czf v8-${V8_VERSION}-include.tar.gz v8/include
      - name: Upload headers
        uses: actions/upload-artifact@v4
        with:
          path: v8-${{ env.V8_VERSION }}-include.tar.gz
          name: v8-${{ env.V8_VERSION }}-include.tar.gz
      - name: Compress sources
        run: |
          tar -czf v8-${V8_VERSION}-src.tar.gz v8/src
      - name: Upload sources
        uses: actions/upload-artifact@v4
        with:
          path: v8-${{ env.V8_VERSION }}-src.tar.gz
          name: v8-${{ env.V8_VERSION }}-src.tar.gz

      # - name: Restore CCache
      #   uses: actions/cache@v4
      #   with:
      #     path: .ccache
      #     key: ${{ matrix.platform }}:libv8:ccache:${{ github.run_number }}
      #     restore-keys: |
      #       ${{ matrix.platform }}:libv8:ccache:
      # - name: Setup Build Tools
      #   shell: bash
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -yq ccache
      #     sudo update-ccache-symlinks

      #     echo "/usr/lib/ccache" >> "$GITHUB_PATH"

      #     ccacheDir="${GITHUB_WORKSPACE}/.ccache"
      #     test -d "$ccacheDir" || mkdir "$ccacheDir"

      #     echo "CCACHE_DIR=$ccacheDir" >> "$GITHUB_ENV"
      #     echo "CC_WRAPPER=ccache" >> "$GITHUB_ENV"
      # - name: Restore V8 Cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       v8
      #       .gclient_entries
      #       .gclient_previous_sync_commits
      #       .cipd
      #     key: ${{ matrix.platform }}:libv8:v8:${{ hashFiles('**/VERSION') }}
      #     restore-keys: |
      #       ${{ matrix.platform }}:libv8:v8:

      - name: Set build args
        run: |
          mkdir -p v8/out.gn/${ARCH}.${BUILD_TYPE}
          envsubst < args.${OS}.gn > v8/out.gn/${ARCH}.${BUILD_TYPE}/args.gn
          cat v8/out.gn/${ARCH}.${BUILD_TYPE}/args.gn
      - name: Build library
        run: |
          cd v8
          gn gen out.gn/${ARCH}.${BUILD_TYPE}
          ninja -j $(($(nproc)+2)) v8_monolith -C out.gn/${ARCH}.${BUILD_TYPE}/
          gn args --list out.gn/${ARCH}.${BUILD_TYPE}
      - name: Compress library
        run: |
          tar -cf v8-${V8_VERSION}-lib_${{ matrix.platform }}.tar.gz \
          --transform="s|^v8/out.gn/${ARCH}.${BUILD_TYPE}/obj/|v8/lib/|" \
          v8/out.gn/${ARCH}.${BUILD_TYPE}/obj/*.a
      - name: Upload library
        uses: actions/upload-artifact@v4
        with:
          path: v8-${{ env.V8_VERSION }}-lib_${{ matrix.platform }}.tar.gz
          name: v8-${{ env.V8_VERSION }}-lib_${{ matrix.platform }}.tar.gz
