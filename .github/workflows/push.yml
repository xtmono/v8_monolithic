name: build when push
on: [push]

env:
  V8_VERSION: 9.4.147     # 8.4.380

defaults:
  run:
    shell: bash

jobs:
  build-linux-x64:
#    if: ${{ false }}  # disable
    name: linux
    runs-on: ubuntu-24.04
    container:
      image: ubuntu:20.04
    strategy:
      fail-fast: false
      matrix:
        platform: [
          linux-x64-static-release,
          linux-x64-static-debug,
          linux-x64-shared-release,
          linux-x64-shared-debug
        ]
    env:
      PLATFORM: ${{ matrix.platform }}
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Platform env
        run: |
          echo "OS=$(echo ${PLATFORM} | awk -F'[-_.]' '{print $1}')" >> $GITHUB_ENV
          echo "ARCH=$(echo ${PLATFORM} | awk -F'[-_.]' '{print $2}')" >> $GITHUB_ENV
          echo "LIB_TYPE=$(echo ${PLATFORM} | awk -F'[-_.]' '{print $3}')" >> $GITHUB_ENV
          echo "BUILD_TYPE=$(echo ${PLATFORM} | awk -F'[-_.]' '{print $4}')" >> $GITHUB_ENV
      - name: Install preliminary tools
        run: |
          echo -e "Package: snapd\nPin: release a=*\nPin-Priority: -10\n" >> /etc/apt/preferences.d/nosnap.pref
          echo -e "Package: snapcraft\nPin: release a=*\nPin-Priority: -10\n" >> /etc/apt/preferences.d/nosnap.pref
          apt-get update && apt-get -y upgrade
          apt-get install -y git python3 python2 build-essential ninja-build curl lsb-release sudo apt-utils tzdata
          update-alternatives --install /usr/bin/python python /usr/bin/python2 60
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          PATH=${GITHUB_WORKSPACE}/depot_tools:${PATH} gclient
          echo "PATH=${GITHUB_WORKSPACE}/depot_tools:${PATH}" >> $GITHUB_ENV
      - name: Fetch v8 repository
        run: |
          fetch v8
      - name: Sync v8 repository to target version
        run: |
          cd v8
          git checkout tags/${V8_VERSION}
          gclient sync
      - name: Compress headers, sources, sysroot
        if: env.LIB_TYPE == 'static' && env.BUILD_TYPE == 'release'
        run: |
          tar -czf v8-${V8_VERSION}-include.tar.gz v8/include
          tar -czf v8-${V8_VERSION}-src.tar.gz v8/src
          tar -czf v8-${V8_VERSION}-sysroot-${OS}-${ARCH}.tar.gz v8/build/linux/*amd64-sysroot/*
      - name: Upload headers
        if: env.LIB_TYPE == 'static' && env.BUILD_TYPE == 'release'
        uses: actions/upload-artifact@v4
        with:
          path: v8-${{ env.V8_VERSION }}-include.tar.gz
          name: v8-${{ env.V8_VERSION }}-include.tar.gz
      - name: Upload sources
        if: env.LIB_TYPE == 'static' && env.BUILD_TYPE == 'release'
        uses: actions/upload-artifact@v4
        with:
          path: v8-${{ env.V8_VERSION }}-src.tar.gz
          name: v8-${{ env.V8_VERSION }}-src.tar.gz
      - name: Upload linux sysroot
        if: env.LIB_TYPE == 'static' && env.BUILD_TYPE == 'release'
        uses: actions/upload-artifact@v4
        with:
          path: v8-${{ env.V8_VERSION }}-sysroot-${{ env.OS }}-${{ env.ARCH }}.tar.gz
          name: v8-${{ env.V8_VERSION }}-sysroot-${{ env.OS }}-${{ env.ARCH }}.tar.gz
      - name: Install build dependencies
        run: |
          v8/build/install-build-deps.sh --no-prompt --no-chromeos-fonts --no-nacl
      - name: Show build tools version
        run: |
          gcc --version
          ldd --version

      # - name: Restore CCache
      #   uses: actions/cache@v4
      #   with:
      #     path: .ccache
      #     key: ${{ matrix.platform }}:libv8:ccache:${{ github.run_number }}
      #     restore-keys: |
      #       ${{ matrix.platform }}:libv8:ccache:
      # - name: Setup Build Tools
      #   shell: bash
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -yq ccache
      #     sudo update-ccache-symlinks

      #     echo "/usr/lib/ccache" >> "$GITHUB_PATH"

      #     ccacheDir="${GITHUB_WORKSPACE}/.ccache"
      #     test -d "$ccacheDir" || mkdir "$ccacheDir"

      #     echo "CCACHE_DIR=$ccacheDir" >> $GITHUB_ENV
      #     echo "CC_WRAPPER=ccache" >> $GITHUB_ENV
      # - name: Restore V8 Cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       v8
      #       .gclient_entries
      #       .gclient_previous_sync_commits
      #       .cipd
      #     key: ${{ matrix.platform }}:libv8:v8:${{ hashFiles('**/VERSION') }}
      #     restore-keys: |
      #       ${{ matrix.platform }}:libv8:v8:

      - name: Set build args
        run: |
          cd v8
          mkdir -p out.gn/${PLATFORM}
          export IS_DEBUG=$([ "$BUILD_TYPE" = "debug" ] && echo true || echo false)
          [ "$LIB_TYPE" = "shared" ] && \
            export IS_COMPONENT_BUILD=true V8_MONOLITHIC=false || \
            export IS_COMPONENT_BUILD=false V8_MONOLITHIC=true
          envsubst < ${GITHUB_WORKSPACE}/args.${OS}.gn > out.gn/${PLATFORM}/args.gn
          cat out.gn/${PLATFORM}/args.gn
      - name: Build library
        run: |
          cd v8
          gn gen out.gn/${PLATFORM}
          export BUILD_TARGET=$([ "$LIB_TYPE" = "shared" ] && \
            echo v8 v8_base v8_libbase v8_libplatform icui18n icuuc || \
            echo v8_monolith)
          ninja -j $(($(nproc)+2)) ${BUILD_TARGET} -C out.gn/${PLATFORM}
      - name: Show build args
        run: |
          cd v8
          gn args --list --short out.gn/${PLATFORM} > out.gn/${PLATFORM}/gn_args_list.txt
      - name: Compress library
        run: |
          tar -cf v8-${V8_VERSION}-lib-${PLATFORM}.tar \
            --transform="s|^v8/out.gn/${PLATFORM}/|v8/|" v8/out.gn/${PLATFORM}/gn_args_list.txt
          find v8/out.gn -name "*.a" -o -name "*.so" | tar -rf v8-${V8_VERSION}-lib-${PLATFORM}.tar \
            --transform="s|^v8/out.gn.*/|v8/lib/|" -T -
          gzip v8-${V8_VERSION}-lib-${PLATFORM}.tar
      - name: Upload library
        uses: actions/upload-artifact@v4
        with:
          path: v8-${{ env.V8_VERSION }}-lib-${{ matrix.platform }}.tar.gz
          name: v8-${{ env.V8_VERSION }}-lib-${{ matrix.platform }}.tar.gz
