name: build when push
on: [push]

env:
  V8_VERSION: "8.4.380"

defaults:
  run:
    shell: bash

jobs:
  build-linux-x64:
#    if: ${{ false }}  # disable
    name: linux
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    strategy:
      fail-fast: false
      matrix:
        platform: [x64]
    steps:
      - name: Install dependencies for container
        run: |
          apt update && apt -y upgrade
          apt-mark hold snapd snapcraft
          apt install -y git python3 python2 curl lsb-release sudo dialog apt-utils
          update-alternatives --install /usr/bin/python python /usr/bin/python2 60
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup depot_tools
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          # echo 'PATH="${GITHUB_WORKSPACE}/depot_tools:${PATH}"' >> "$GITHUB_ENV"
      - name: Fetch tagged version
        run: |
          export PATH="${GITHUB_WORKSPACE}/depot_tools:${PATH}"
          mkdir -p ${GITHUB_WORKSPACE}/v8
          gclient
          fetch v8
          cd ${GITHUB_WORKSPACE}/v8
          git checkout tags/${V8_VERSION}
          gclient sync
      - name: Install build dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
          TZ: Etc/UTC
        run: |
          export PATH="${GITHUB_WORKSPACE}/depot_tools:${PATH}"
          # export DEBIAN_FRONTEND=noninteractive
          # export TZ=Etc/UTC
          ./build/install-build-deps.sh
      - name: Compress headers
        run: |
          tar -czf ${GITHUB_WORKSPACE}/v8-${V8_VERSION}-include.tar.gz v8/include
      - name: Upload headers
        uses: actions/upload-artifact@v4
        with:
          path: ${GITHUB_WORKSPACE}/v8-${V8_VERSION}-include.tar.gz
          name: v8-${V8_VERSION}-include.tar.gz
      - name: Compress source
        run: |
          tar -czf ${GITHUB_WORKSPACE}/v8-${V8_VERSION}-src.tar.gz v8/src
      - name: Upload source
        uses: actions/upload-artifact@v4
        with:
          path: ${GITHUB_WORKSPACE}/v8-${V8_VERSION}-src.tar.gz
          name: v8-${V8_VERSION}-src.tar.gz

      # - name: Restore CCache
      #   uses: actions/cache@v4
      #   with:
      #     path: .ccache
      #     key: ${{ runner.os }}-${{ matrix.platform }}:libv8:ccache:${{ github.run_number }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ matrix.platform }}:libv8:ccache:
      # - name: Setup Build Tools
      #   shell: bash
      #   run: |
      #     sudo apt update
      #     sudo apt install -yq ccache
      #     sudo update-ccache-symlinks

      #     echo "/usr/lib/ccache" >> "$GITHUB_PATH"

      #     ccacheDir="${GITHUB_WORKSPACE}/.ccache"
      #     test -d "$ccacheDir" || mkdir "$ccacheDir"

      #     echo "CCACHE_DIR=$ccacheDir" >> "$GITHUB_ENV"
      #     echo "CC_WRAPPER=ccache" >> "$GITHUB_ENV"
      # - name: Restore V8 Cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       v8
      #       .gclient_entries
      #       .gclient_previous_sync_commits
      #       .cipd
      #     key: ${{ runner.os }}-${{ matrix.platform }}:libv8:v8:${{ hashFiles('**/VERSION') }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ matrix.platform }}:libv8:v8:

      - name: Copy build args
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/v8/out.gn/${{ matrix.platform }}.release/
          cp ${GITHUB_WORKSPACE}/args.linux.gn ${GITHUB_WORKSPACE}/v8/out.gn/${{ matrix.platform }}.release/args.gn
      - name: Set platform in build args
        uses: iamazeem/substitute-action@v1
        env:
          PLATFORM: ${{ matrix.platform }}
          CC_WRAPPER: ${CC_WRAPPER}
        with:
          input-files: ${GITHUB_WORKSPACE}/v8/out.gn/${{ matrix.platform }}.release/args.gn
      - name: Verify substitution
        run: |
          cat ${GITHUB_WORKSPACE}/v8/out.gn/${{ matrix.platform }}.release/args.gn
      - name: Build library
        run: |
          export PATH="${GITHUB_WORKSPACE}/depot_tools:${PATH}"
          cd ${GITHUB_WORKSPACE}/v8
          gn gen out.gn/${{ matrix.platform }}.release
          ninja -j $(($(nproc)+2)) v8_monolith -C out.gn/${{ matrix.platform }}.release/
          gn args --list out.gn/${{ matrix.platform }}.release
      - name: Compress library
        run: |
          tar -czf ${GITHUB_WORKSPACE}/v8-${V8_VERSION}-lib_linux-${{ matrix.platform }}.tar.gz \
          --transform="s|.*/v8/out\.gn/${{ matrix.platform }}\.release/obj|v8|" \
          ${GITHUB_WORKSPACE}/v8/out.gn/${{ matrix.platform }}.release/obj/libv8_monolith.a
      - name: Upload library
        uses: actions/upload-artifact@v4
        with:
          path: ${GITHUB_WORKSPACE}/v8-${V8_VERSION}-lib_linux-${{ matrix.platform }}.tar.gz
          name: v8-${V8_VERSION}-lib_linux-${{ matrix.platform }}.tar.gz
      - name: Compress generated source
        run: |
          tar -czf ${GITHUB_WORKSPACE}/v8-${V8_VERSION}-gen_linux-${{ matrix.platform }}.tar.gz \
          --transform="s|.*/v8/out\.gn/${{ matrix.platform }}\.release|v8|" \
          ${GITHUB_WORKSPACE}/v8/out.gn/${{ matrix.platform }}.release/gen
      - name: Upload generated source
        uses: actions/upload-artifact@v4
        with:
          path: ${GITHUB_WORKSPACE}/v8-${V8_VERSION}-gen_linux-${{ matrix.platform }}.tar.gz
          name: v8-${V8_VERSION}-gen_linux-${{ matrix.platform }}.tar.gz
